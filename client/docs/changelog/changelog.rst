Changelog
=========



v0.8.1 (2025-06-24)
-------------------
 - Добавлен локальный запуск задач в целях отладки. Пример использования можно посмотреть в разделе :ref:`Local Debug Mode <local_debug_mode>`.

 - В карточке задачи добавлена вкладка для мониторинга ресурсов исполняемой задачи. Также мониторинг ресурсов доступен в sdk :func:`~ML_management.sdk.job.job_resource_usage`.

 - Добавлена информативная ошибка при попытке создать бакет с неправильным именем.

 - В ui добавлена ссылка на актуальную документацию в нижнем левом углу.

 - В ui добавлена возможность менять язык.

 - В ui добавлена возможность в реестре задач добавлять метрики как столбец для непосредственного сравнения.

 - В классе :class:`~ML_management.mlmanagement.metainfo.LoadedObject` переименован атрибут ``loaded_class`` на ``loaded_object`` для экземпляра загруженного класса.

v0.7.0 (2025-06-03)
-------------------
 - Класс :class:`~ML_management.jsonschema_inference.SkipJsonSchema` перенесен в другой модуль.

 - Добавлено кэширование в локальную папку при загрузке сущностей с сервера. По умолчанию кэширование включено и будет хранится в домашнем каталоге по пути ``$HOME/.mlm_registry_cache``. Настроить можно при помощи переменных окружения NO_CACHE и LOCAL_REGISTRY_PATH, либо при помощи функций :func:`~ML_management.mlmanagement.backend_api.set_local_registry_path` и :func:`~ML_management.mlmanagement.backend_api.set_no_cache_load`.

 - Теперь функции загрузки сущностей с сервера возвращают не инстанс сущности, а класс обертку :class:`~ML_management.mlmanagement.metainfo.LoadedObject`.

 - Появилась проверка на дубликат версии путем подсчета и последующего хранения хэша артефактов при зазрузке на сервер. Версия не загружается, если версия с таким кодом и артефактами уже присутствует на сервере. Результат загрузки возвращается в виде класса :class:`~ML_management.mlmanagement.metainfo.ObjectMetaInfo`. При выставлении параметра force в функции логирования версия будет загружена принудительно.

 - Теперь функция :func:`~ML_management.mlmanagement.active_job.start_job` может использоваться не только в качестве контекстного менеджера, но и в связке с :func:`~ML_management.mlmanagement.active_job.stop_job`.

 - Добавлена поддержка Enum, pydantic.BaseModel в качестве аннотаций аргументов у методов сущностей.

 - Появилась возможность скачать метрики задачи в виде csv как с ui так и при помощи функции :func:`~ML_management.mlmanagement.load_api.download_job_metrics`.

 - В методе :py:meth:`~ML_management.s3.manager.S3Manager.set_data` появился параметр `sync`, который позволяет синхронизировать локальную папку и удаленный бакет. Рекурсивно копирует новые и обновленные файлы из удаленного бакета в локальную папку. 

 - В ui в реестре задач добавлена возможность на графике сравнивать метрики для нескольких задач.

 - В ui появилась возможность добавить свой график в сравнении метрик задач: график строится на основе выбранных пользователем полей.

 - В ui для выполняющихся задач график метрик обновляется в режиме реального времени.
 
 - В ui появились расширенные фильтры для реестров сущностей и поиск по бакетам в реестре задач. 

 - В ui появился предпросмотр файлов формата Markdown.

 - В ui изменилась терминальная раскраска логов задач. 

 - Для быстродействия в ui график метрик отображает не более 5000 точек на линию. При достижении этого ограничения график будет приближенным. Для получения более точного графика вы можете воспользоваться интервалами для исследования отдельных областей графика.

 - Исправлен баг с невозможностью указать параметры init у моделей при старте задачи.


v0.6.3 (2025-03-06)
-------------------
 - Появилась возможность запускать задачу со своим именем (параметр ``job_name`` в функции :func:`~ML_management.sdk.job.add_ml_job`). Для этого можно использовать латинские буквы, цифры и дефис.

 - При запуске задачи с несколькими моделями выбирается максимальная версия Python (из заданных в conda.yaml моделей).

 - Появилась возможность запускать задачу локально с помощью функции :func:`~ML_management.mlmanagement.active_job.start_job`. Это позволит логировать метрики и артефакты задачи без необходимости загружать ваши модели в реестр. В этом случае MLManagement выступает как хранилище метрик и артефактов, связанных с запускаемой локально задачей. Подробнее в разделе :ref:`Local Job <local_job>`.

 - Появилась функция поиска версий модели :func:`~ML_management.sdk.model.pagination_model_version`. Есть возможность фильтровать версии модели по тегам. Также появились аналогичные функции для других сущностей.

 - Для всех сущностей в ui появилась информация об уровне их видимости.

 - Изменение статуса задачи в ui обновляется в режиме реального времени. 

 - Начата работа по модернизации функционала для аналитики результатов задач. Первое изменение — появилась возможность одновременно просматривать графики всех метрик задачи.

 - Более нет ограничения для мажорной версии библиотеки pydantic.

v0.5.3 (2024-12-02)
-------------------

 - Изменился порядок использования аннотации системных параметров методов. Теперь вместо SkipJsonSchema[T] ожидается Annotated[T, SkipJsonSchema] (см. пример :class:`~ML_management.jsonschema_inference.SkipJsonSchema`).

 - Удалены методы загрузки сущностей, при которых происходила их сериализация при помощи pickle. Теперь все загрузки сущностей должны происходить при помощи соответствующих функций. Например для модели :func:`~ML_management.mlmanagement.log_api.log_model_src`.

 - Если при запуске задания не указано имя эксперимента, то по умолчанию будет выбран эксперимент с именем Default.

 - Mlflow удален из зависимостей (все, кто имел доступ в /mlui, его больше нету).

 - За вклад в развитие документации благодарность выражается vovaf709.

 - Добавлены параметры в мутацию создания джобы start_build_new_models_image:bool - флаг, который задает сборку образа для новой версии или модели и visibility - видимость джобы другим пользователям, а так же аналогичный параметр для новых моделей и версий.


v0.4.0 (2024-10-09)
-------------------

 - Для пользовательских функций следует использовать короткие импорты. Ранее применявшиеся длинные импорты работать не будут (Пример: ``ML_management.mlmanagement.mlmanagement.set_mlm_credentials`` следует переписать на ``ML_management.mlmanagement.set_mlm_credentials``).

 - Теперь есть возможность передавать параметры в функцию *__init__* для моделей и загрузчиков данных. Важно, что аргументы у функций  *__init__* и *get_object* в ``__init__.py`` файле должны совпадать. Если они не совпадают модель все еще можно будет загрузить, но не будет возможности передать аргументы в *__init__* во время старта задачи.

 - С текущего момента для работы с s3-хранилищем необходимо использовать новый класс :class:`~ML_management.s3.manager.S3Manager`. Он объединяет в себе функциональность ``S3Uploader`` и ``S3Collector``, а также добавляет новую (просмотр и удаление доступных бакетов, обновление прав доступа и др.). ``S3Uploader`` и ``S3Collector`` теперь имеют статус DEPRECATED и могут быть удалены в будущих релизах.

 - SDK: Изменились названия классов для запуска задач (SingleModel->ModelForm, ArbitraryModels->AnyModelForm и т.д.); появились функции :func:`~ML_management.sdk.executor.get_latest_executor_version`, :func:`~ML_management.sdk.dataset_loader.get_latest_dataset_loader_version`, :func:`~ML_management.sdk.executor.get_initial_executor_version`, :func:`~ML_management.sdk.dataset_loader.get_initial_dataset_loader_version`.

 - В функции :func:`~ML_management.mlmanagement.load_api.load_model` и анологичных ей можно не указывать версию модели. Будет взята последняя доступная.

 - Добавлена новая функция :func:`~ML_management.mlmanagement.log_api.log_metrics`, которая позволяет залогировать сразу несколько метрик за раз.

 - В реестре "Данные" появилась возможность скачивать файлы, загружать папку или файл в бакет, удалять файл, удалять пустой бакет, создавать бакет и менять права видимости для бакета.

 - В карточке версии сущности (модели, датасетлоадера, экзекьютора) и в карточке задачи появилась возможность просматривать содержимое файлов Артефактов и скачивать их. 

v0.3.0 (2024-09-16)
-------------------
 - В ui добавился новый реестр с названием "Данные" - это те сырые данные, которые были загружены с помощью S3Uploader. :meth:`~ML_management.uploader_data.s3_uploader.S3Uploader.upload`. Сейчас можно просматривать, что внутри. В дальнейшем будет возможность из ui интерфейса создавать и загружать бакеты , скачивать и удалять файлы. 

 - В ui добавилась возможность просматривать артефакты джобы или артефакты загруженной сущности (модели, датасетлоадера, экзекьютора) (ее код и данные в папке artifacts). Для этого необходимо перейти в карточку версии сущности или джобы и выбрать снизу таб "Артефакты". В дальнейшем можно будет скачать их или посмотреть содержимое файла в браузере.

 - Если при старте задачи с экзекьютором, который требует загрузку модели в конце своего выполнения, не указывать новое имя получившейся модели, то загруженная в конце модель будет загружена как версия модели, с которой была запущена задача. 

 - Теперь ``self.artifacts`` подкладывается до инициализации модели, а это значит, что в функции *__init__* модели в ``self.artifacts`` уже будет лежать валидный путь до папки с артефактами.

 - Теперь подробный статус зафейленной задачи отображается в графе "Сообщение" в шапке карточки задачи.



v0.2.0 (2024-08-27)
-------------------
 - Отпала необходимость заполнения set_minio_url и set_minio_credentials, достаточно как и раньше выполнить :func:`~ML_management.mlmanagement.backend_api.set_server_url` и :func:`~ML_management.mlmanagement.backend_api.set_mlm_credentials` и при использовании :class:`~ML_management.uploader_data.s3_uploader.S3Uploader` данные будут отправляться в нужное место хранения.

 - Ускорилась загрузка данных с помощью :class:`~ML_management.uploader_data.s3_uploader.S3Uploader`. Также появилась возможность установить флаг ``upload_as_tar`` в методе :meth:`~ML_management.uploader_data.s3_uploader.S3Uploader.upload` и в этом случае прежде чем данные отправятся в хранилище, они будут запакованы в tar архив - это значительно ускоряет процесс загрузки, если изначально файликов очень много. В будущем при старте задачи с этим загруженным бакетом у s3 коллектора можно выставить флаг ``untar_data`` - при указании которого, запакованный архив будет распакован при скачивании. 

 - У метода :meth:`~ML_management.uploader_data.s3_uploader.S3Uploader.upload` появился параметр ``new_bucket_visibility`` - он определяет видимость бакета, по дефолту видеть загруженный бакет может только пользователь его загрузивший, но если указать ``new_bucket_visibility``: :attr:`~ML_management.mlmanagement.visibility_options.VisibilityOptions.PUBLIC` при загрузке - он станет виден всем. 

 - Иногда возникает ситуация, когда для нескольких моделей или для модели и датасетлодера нужен какой то общий код, который импользуется и там и там. Раньше необходимо было при загрузке сущностей с помощью log_*_src копировать этот код в каждый из пакетов каждой сущности. Но теперь можно в директории, в которой находятся пакеты модели, датасетлоадера или экзекьютора создать общий пакет в котором будет общий код. Для доступа к нему необходимо в коде сущностей использовать относительный импорт. При логировании log_*_src для каждой из сущностей необходимо указать additional_local_packages - список путей до пакетов, которые нужно залогировать как дополнительный пакет вместе с кодом модели, датасетлоадера или экзекьютора.
    
.. code::

    root
    ├── utils
    |   ├── __init__.py
    |   └── dependencies.py
    ├── model_code
    |   ├── __init__.py
    |   ├── model.py
    |   └── conda.yaml
    └── dataset_loader_code
        ├── __init__.py
        ├── data.py
        └── conda.yaml

.. code-block:: python
    :caption: utils/dependencies.py

    def do_something():
        a = 2 + 2
        print(a)
        return a

.. code-block:: python
    :caption: model_code/model.py

    from ML_management.model import TrainableModel

    from ..utils.dependencies import do_something

    class Model(TrainableModel):
        def predict_function(self, ...):
            do_something()
            return None
        
        def train_function(self, ...):
            do_something()
            return None

.. code-block:: python
    :caption: dataset_loader_code/data.py

    from ML_management.dataset_loader.dataset_loader_pattern import DatasetLoaderPattern

    from ..utils.dependencies import do_something

    class Dataset(DatasetLoaderPattern):
        def get_dataset(self, ...):
            ...
            do_something()
            return ...

\

 - Теперь отменять задачу (:func:`~ML_management.sdk.job.cancel_job`) и удалять сущности (:func:`~ML_management.sdk.model.delete_model`, :func:`~ML_management.sdk.model.delete_model_version`, ... ) можно средствами sdk.

 - Функция sdk :func:`~ML_management.sdk.job.metric_history` строит график более наглядно.


v0.1.0 (2024-07-23)
-------------------
 - Появилась документация к использованию платформы. Доступна на <domain>/docs

 - Теперь с помощью функции mlmanagement.set_server_url, mlmanagement.set_mlm_credentials можно выставить соответсвенно url сервера и логин пароль юзера (раньше это делалось через переменные окружения - такая возможность тоже осталась).

 - Появилась возможность аннотирования системных параметров методов. Так, если в какой-то функции модели часть параметров выставляется не пользователем, а используется из экзекьютора, то тип этих параметров будет SkipJsonSchema[T], где T — произвольный тип. Например если у класса модели есть метод get_grad() и туда не нужно с клиентской стороны передавать значение какого то параметра в схеме при старте джобы, то можно использовать SkipJsonSchema и указать аннотацию вот так: def get_grad(loss_fn: SkipJsonSchema[Callable]). В этом случае при старте задачи заполнять схему для этого параметра loss_fn не нужно.  Также если для функции get_grad вообще не нужно передавать какие либо параметры с клиенской стороны, или нужно использовать дефолтные параметры, то можно при старте задачи не указывать функцию get_grad вовсе.

 - Добавилась возможность грузить экзекьюторы, которые используют несколько датасетлоадеров, в связи с этим изменились базовые классы экзекьюторов и теперь создавать свои экзекьюторы нужно немного по другому. Подробнее см документ 1 или https://confluence.intra.ispras.ru/pages/viewpage.action?pageId=101221738

 - Так как добавилась возможность запускать задачу с несколькими датасетлоадерами, изменились параметры в функции *add_ml_job* для старта задачи через sdk. Появились новые абстрактные классы для этого. Подробнее см документ 2 или https://confluence.intra.ispras.ru/pages/viewpage.action?pageId=108915273 


 Пользовательский интерфейс:
 - Появилась возможность перезапускать задачу с теми же параметрами по одной кнопке. В карточке джобы в правом верхнем углу кнопка "Перезапустить". Будет сформирована форма создания задачи с предзаполненными параметрами.

 - Логи сборки образа, логи сборки для инференса показываются в карточке версии модели. Логи задачи также показываются в ui в карточке задачи.

 - Если версия модели получилась после выполнения задачи, в карточке версии модели есть ссылка на эту задачу.

 - Появилась возможность отмены задачи, в карточке задачи кнопка в правом верхнем углу.